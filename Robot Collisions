class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        stack<pair<int,pair<int,int>>>st;  // positions,healths and directions
        vector<pair<int,pair<int,int>>>v;
        
        int n=healths.size();
        for(int i=0;i<n;i++){
            v.push_back({positions[i],{healths[i],directions[i]}});
        }
        sort(v.begin(),v.end());
        for(int i=0;i<n;i++){
            int dir;
            if(v[i].second.second=='L'){
                dir=0;
            }else{
                dir=1;
            }
             if(st.empty()){
                st.push({v[i].first,{v[i].second.first,dir}});
             }else{
                    if(dir==0){
                        while(!st.empty() and st.top().second.second==1 and v[i].second.first!=0){
                            if(st.top().second.first==v[i].second.first){
                                   v[i].second.first=0;
                                   st.pop();
                            }else if(st.top().second.first>v[i].second.first){
                                   v[i].second.first=0;
                                   pair<int,pair<int,int>>p=st.top();
                                   st.pop();
                                   st.push({p.first,{p.second.first-1,p.second.second}});
                            }else{
                                  pair<int,pair<int,int>>p=st.top();
                                   st.pop();
                                   v[i].second.first--;
                                 
                            }
                        }
                        if(v[i].second.first!=0){
                            st.push({v[i].first,{v[i].second.first,dir}});
                        }
                    }else{
                        st.push({v[i].first,{v[i].second.first,dir}});
                    }
             }
        }
        // while(st.size()>=2){
        //     pair<int,pair<int,int>>p1=st.top();
        //     st.pop();
        //     pair<int,pair<int,int>>p2;
        //     if(!st.empty()){
        //        p2=st.top();
        //        st.pop();
        //     }else{
        //         st.push(p1);
        //         break;
        //     }
           
        //     if(p1.second.second==0 and p2.second.second==1){
        //         if(p1.second.first==p2.second.first){
        //              continue;
        //         }else if(p1.second.first>p2.second.first){
        //             st.push({p1.first,{p1.second.first-1,p1.second.second}});
        //         }else{
        //             st.push({p2.first,{p2.second.first-1,p2.second.second}});
        //         }
        //     }else{
        //         st.push(p1);
        //         st.push(p2);
        //         break;
        //     }
        // }
        vector<int>ans;
        unordered_map<int,int>umap;
        while(st.size()>0){
            umap[st.top().first]=st.top().second.first;
            st.pop();
        }
        for(int i=0;i<n;i++){
            int pos=positions[i];
            if(umap.find(pos)!=umap.end()){
                ans.push_back(umap[pos]);
            }
        }
        return ans;
    }
};
